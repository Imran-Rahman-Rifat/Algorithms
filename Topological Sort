#include<bits/stdc++.h>
using namespace std;
stack<int> s;
void print_graph(vector<pair<int,int>> graph[],int v)
{
    for(int i=0;i<v;i++){
        cout<<i<<"->";
        for(auto it=graph[i].begin();it!=graph[i].end();it++){
            cout<<it->first<<" "<<it->second<<" ";
        }
        cout<<endl;
    }
}
void DFS(vector<pair<int,int>> graph[],int root,bool visited[])
{
    visited[root]=true;
    for(auto it=graph[root].begin();it!=graph[root].end();it++){
        if(!visited[it->first])
            DFS(graph,it->first,visited);
    }
    s.push(root);
}
void topologicalSort(vector<pair<int,int>> graph[],int v)
{
    bool visited[v];
    for(int i=0;i<v;i++){
            visited[i]=false;
    }
    for(int i=0;i<v;i++){
        if(!visited[i])
            DFS(graph,i,visited);
    }
    while(!s.empty()){
        cout<<s.top()<<" ";
        s.pop();
    }
    cout<<endl;

}
int main()
{
    int v,e;
    cin>>v>>e;
    vector<pair<int,int>> graph[v];
    for(int i=0;i<e;i++){
        int x,y,cost;
        cin>>x>>y>>cost;
        graph[x].push_back(make_pair(y,cost));

    }
    bool visited[v];
    for(int i=0;i<v;i++){
            visited[i]=false;
    }
    //DFS(graph,0,visited);
    //print_graph(graph,v);
    topologicalSort(graph,v);
}
/*
7 6
0 1 5
0 2 6
1 3 9
1 5 7
2 6 13
2 4 10
*/
