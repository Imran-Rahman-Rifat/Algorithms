#include<bits/stdc++.h>
using namespace std;
#define pp pair<int,int>
 vector<pp> graph[100];
void prim(int v)
{
    priority_queue<pp,vector<pp>,greater<pp>> q;
     int src=0;

     vector<int> key(v,INT_MAX);
     vector<int> parent(v, -1);
     vector<bool> visit(v,false);
     q.push(make_pair(0,src));
     key[src] =0;

     while(!q.empty()){
        int u=q.top().second;
        q.pop();
        if(visit[u]) continue;
        visit[u]=true;
        for(auto it=graph[u].begin(); it!=graph[u].end();it++){
                int x=it->first;
                int y=it->second;
            if(visit[x]==false && key[x]>y){
                key[x]=y;
                q.push(make_pair(key[x],x));
                //cout<<u<<endl;
                parent[x]=u;
            }

        }

     }
     cout<<endl;
     int sum=0;
     for(int i=1;i<v;i++){
        cout<<parent[i]<<" -> "<<i<<" "<<key[i]<<endl;
        sum+=key[i];
     }
     cout<<endl;
     cout<<"The total cost of minimum spanning tree is = "<<sum<<endl;
}
int main()
{
    int v,e;
    cin>>v>>e;
   //vector<pair<int,pp>> graph[v];
    for(int i=0;i<e;i++){
        int x,y,cost;
        cin>>x>>y>>cost;
        graph[x].push_back(make_pair(y,cost));
        graph[y].push_back(make_pair(x,cost));
    }
    /*for(int i=0;i<v;i++){
            cout<<i<<"->";
        for(int j=0;j<graph[i].size();j++){
            cout<<graph[i][j].first<<" ("<<graph[i][j].second<<") ";
        }
    cout<<endl;
    }*/
    prim(v);

}
/*
9 14
0 1 4
0 7 8
1 2 8
1 7 11
2 3 7
2 8 2
2 5 4
3 4 9
3 5 14
4 5 10
5 6 2
6 7 1
6 8 6
7 8 7
*/
/*
5 7
0 1 2
0 3 6
1 2 3
1 3 8
1 4 5
2 4 7
3 4 9
*/
