#include<bits/stdc++.h>
using namespace std;
int dis[9999];
int path[9999];
void Dijktra_algo(vector<pair<int,int>> graph[],int source,int v)
{
    for(int i=0;i<v;i++){
        dis[i]=INT_MAX;
    }
     priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>> > q;
    dis[source]=0;
    q.push(make_pair(dis[source],source));
    while(!q.empty()){
        int x=q.top().second;
        q.pop();
        for(auto i=graph[x].begin();i!=graph[x].end();i++){
            int y=i->first;
            int cost=i->second;
            if(dis[y]>dis[x]+cost){
                dis[y]=dis[x]+cost;
                q.push(make_pair(dis[y],y));
                path[y]=x;
            }
        }
    }
    for(int i=0;i<v;i++){
            if(dis[i]==INT_MAX) cout<<"The total cost "<<source<<" to "<<i<<" is  = INF"<<endl;
            else cout<<"The total cost "<<source<<" to "<<i<<" is  = "<<dis[i]<<endl;

    }
    cout<<endl;



}
void print_path(int source,int des)
{
    if(source==des) cout<<source<<" ";
    else if(dis[des]==INT_MAX){
        cout<<"No path exit";
    }
    else{
        print_path(source,path[des]);
        cout<<des<<" ";

    }

}
int main()
{
    int v,e,x,y,cost;
    cin>>v>>e;
    vector<pair<int,int>> graph[v];
    for(int i=0;i<e;i++){
        cin>>x>>y>>cost;
        graph[x].push_back(make_pair(y,cost));
    }
    int source=0;
    Dijktra_algo(graph,source,v);
    for(int i=0;i<v;i++){
        cout<<"Path from "<<source<<" to "<<i<<" is = ";
        print_path(source,i);
        cout<<endl;
    }
}
/*
9 14
0 1 4
0 7 8
1 2 8
1 7 11
2 3 7
2 8 2
2 5 4
3 4 9
3 5 14
4 5 10
5 6 2
6 7 1
6 8 6
7 8 7
*/
